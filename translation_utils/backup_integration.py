#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å Translation Evaluator
–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
"""

import streamlit as st
import pandas as pd
from pathlib import Path
import json
from datetime import datetime
import logging

try:
    from translation_utils.backup_manager import TranslationBackupManager
except ImportError:
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class TranslationBackupManager:
        def __init__(self, *args, **kwargs):
            pass
        def create_session(self, *args, **kwargs):
            return None
        def save_model_results(self, *args, **kwargs):
            pass
        def load_model_results(self, *args, **kwargs):
            return None

logger = logging.getLogger(__name__)

def init_backup_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if 'backup_manager' not in st.session_state:
        st.session_state.backup_manager = TranslationBackupManager()
    
    if 'current_session_id' not in st.session_state:
        st.session_state.current_session_id = None
    
    if 'saved_models' not in st.session_state:
        st.session_state.saved_models = {}

def show_backup_status():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    with st.sidebar:
        st.markdown("---")
        st.subheader("üîÑ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        
        if st.session_state.current_session_id:
            st.success(f"–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {st.session_state.current_session_id[:12]}...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            if st.session_state.saved_models:
                st.write("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
                for model_name, status in st.session_state.saved_models.items():
                    if status == "completed":
                        st.write(f"‚úÖ {model_name}")
                    elif status == "in_progress":
                        st.write(f"üîÑ {model_name}")
                    else:
                        st.write(f"‚ùå {model_name}")
        else:
            st.info("–°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")

def create_translation_session(source_texts, model_names=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    Args:
        source_texts: –°–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        model_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –º–æ–¥–µ–ª–µ–π
        
    Returns:
        str: ID —Å–µ—Å—Å–∏–∏
    """
    init_backup_system()
    
    session_id = st.session_state.backup_manager.create_session(
        source_texts, model_names
    )
    
    st.session_state.current_session_id = session_id
    st.session_state.saved_models = {}
    
    logger.info(f"Created backup session: {session_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    st.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {session_id[:12]}...")
    
    return session_id

def save_model_translation(model_name, translations, metadata=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏
    
    Args:
        model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        translations: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    """
    init_backup_system()
    
    if not st.session_state.current_session_id:
        st.warning("–°–µ—Å—Å–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        return
    
    try:
        st.session_state.backup_manager.save_model_results(
            st.session_state.current_session_id,
            model_name,
            translations,
            metadata
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
        st.session_state.saved_models[model_name] = "completed"
        
        st.success(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏ {model_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        logger.info(f"Saved results for model: {model_name}")
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}")
        logger.error(f"Failed to save model results: {e}")

def load_model_translation(model_name, session_id=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏
    
    Args:
        model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        session_id: ID —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è)
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ None
    """
    init_backup_system()
    
    if not session_id:
        session_id = st.session_state.current_session_id
    
    if not session_id:
        return None
    
    try:
        results = st.session_state.backup_manager.load_model_results(
            session_id, model_name
        )
        
        if results:
            st.info(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
            logger.info(f"Loaded saved results for model: {model_name}")
        
        return results
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}")
        logger.error(f"Failed to load model results: {e}")
        return None

def show_session_recovery():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π"""
    init_backup_system()
    
    with st.expander("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π"):
        sessions = st.session_state.backup_manager.list_sessions()
        
        if not sessions:
            st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            return
        
        st.write("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:")
        
        for session_id in sessions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ—Å—Å–∏–π
            session_info = st.session_state.backup_manager.get_session_info(session_id)
            
            if session_info:
                created_at = session_info.get('created_at', 'Unknown')
                total_texts = session_info.get('total_texts', 0)
                completed_models = session_info.get('completed_models', [])
                
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**{session_id[:12]}...** ({created_at[:16]})")
                    st.write(f"–¢–µ–∫—Å—Ç–æ–≤: {total_texts}, –ú–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(completed_models)}")
                    if completed_models:
                        st.write(f"–ú–æ–¥–µ–ª–∏: {', '.join(completed_models[:3])}{'...' if len(completed_models) > 3 else ''}")
                
                with col2:
                    if st.button("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", key=f"restore_{session_id}"):
                        st.session_state.current_session_id = session_id
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
                        st.session_state.saved_models = {}
                        for model_name in completed_models:
                            st.session_state.saved_models[model_name] = "completed"
                        
                        st.success(f"–°–µ—Å—Å–∏—è {session_id[:12]}... –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                        st.experimental_rerun()

def show_backup_management():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"""
    init_backup_system()
    
    with st.expander("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è")
            if st.session_state.current_session_id:
                st.code(st.session_state.current_session_id)
                
                if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"):
                    st.session_state.current_session_id = None
                    st.session_state.saved_models = {}
                    st.success("–ì–æ—Ç–æ–≤–æ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
                    st.experimental_rerun()
            else:
                st.info("–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        
        with col2:
            st.subheader("–û—á–∏—Å—Ç–∫–∞")
            days_to_keep = st.number_input(
                "–•—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª—ã (–¥–Ω–µ–π)", 
                min_value=1, 
                max_value=30, 
                value=7
            )
            
            if st.button("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã"):
                try:
                    st.session_state.backup_manager.cleanup_old_sessions(days_to_keep)
                    st.success(f"–£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ {days_to_keep} –¥–Ω–µ–π")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")

def get_backup_statistics():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    init_backup_system()
    
    try:
        backup_dir = Path("translation_backups")
        if not backup_dir.exists():
            return {"sessions": 0, "models": 0, "size_mb": 0}
        
        sessions_count = len(list((backup_dir / "sessions").glob("*.json"))) if (backup_dir / "sessions").exists() else 0
        models_count = len(list((backup_dir / "models").glob("*.json"))) if (backup_dir / "models").exists() else 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        total_size = 0
        for file_path in backup_dir.rglob("*"):
            if file_path.is_file():
                total_size += file_path.stat().st_size
        
        size_mb = total_size / (1024 * 1024)
        
        return {
            "sessions": sessions_count,
            "models": models_count,
            "size_mb": round(size_mb, 1)
        }
        
    except Exception as e:
        logger.error(f"Failed to get backup statistics: {e}")
        return {"sessions": 0, "models": 0, "size_mb": 0}

def auto_save_progress(model_name, completed_count, total_count, partial_translations=None):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞
    
    Args:
        model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        completed_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        total_count: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        partial_translations: –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    init_backup_system()
    
    if not st.session_state.current_session_id:
        return
    
    try:
        st.session_state.backup_manager.save_progress(
            st.session_state.current_session_id,
            model_name,
            completed_count,
            total_count,
            partial_translations
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
        if model_name not in st.session_state.saved_models:
            st.session_state.saved_models[model_name] = "in_progress"
        
    except Exception as e:
        logger.error(f"Failed to auto-save progress: {e}")

# Decorator –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def with_backup(model_name):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
    
    Args:
        model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    """
    def decorator(translate_func):
        def wrapper(*args, **kwargs):
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                result = translate_func(*args, **kwargs)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result and isinstance(result, (list, tuple)):
                    save_model_translation(model_name, result)
                
                return result
                
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                logger.error(f"Translation failed for {model_name}: {e}")
                raise
        
        return wrapper
    return decorator
