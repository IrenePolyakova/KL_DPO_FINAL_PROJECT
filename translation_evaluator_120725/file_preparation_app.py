import streamlit as st
import pandas as pd
import io
import os
import zipfile
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Translation Evaluator",
    page_icon="üìÅ",
    layout="wide",
    initial_sidebar_state="expanded"
)


def convert_xlsx_to_csv_data(uploaded_file):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π XLSX —Ñ–∞–π–ª –≤ DataFrame
    
    Args:
        uploaded_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π XLSX —Ñ–∞–π–ª –∏–∑ Streamlit
    
    Returns:
        pd.DataFrame: –î–∞–Ω–Ω—ã–µ –∏–∑ XLSX —Ñ–∞–π–ª–∞
    """
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(uploaded_file)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ XLSX")
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ XLSX: {str(e)}")
        raise

def detect_columns(df):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏ —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º"""
    src_col = None
    tgt_col = None
    
    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    for col in df.columns:
        col_lower = col.lower()
        if not src_col and any(x in col_lower for x in [
            'source', 'src', 'en', '–∏—Å—Ö–æ–¥–Ω—ã–π', 'english'
        ]):
            src_col = col
            break
    
    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º/–ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    for col in df.columns:
        col_lower = col.lower()
        if not tgt_col and any(x in col_lower for x in [
            'target', 'tgt', 'ru', '—ç—Ç–∞–ª–æ–Ω', '–ø–µ—Ä–µ–≤–æ–¥', 'russian', 'reference'
        ]):
            tgt_col = col
            break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    if not src_col and len(df.columns) >= 2:
        src_col = df.columns[0]
    if not tgt_col and len(df.columns) >= 2:
        tgt_col = df.columns[1]
    
    return src_col, tgt_col

def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if pd.isna(text):
        return ""
    return str(text).strip()

def prepare_files_data(df, src_col, tgt_col, prefix="prepared", filter_empty=True):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–∏–ª–∏–Ω–≥–≤–∞–ª—å–Ω–æ–≥–æ DataFrame
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é DataFrame
    df_clean = df.copy()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_clean[src_col] = df_clean[src_col].apply(clean_text)
    df_clean[tgt_col] = df_clean[tgt_col].apply(clean_text)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –¥—É–±–ª–∏
    if filter_empty:
        original_len = len(df_clean)
        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –ø—É—Å—Ç—ã–µ
        df_clean = df_clean[(df_clean[src_col] != "") & (df_clean[tgt_col] != "")]
        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        df_clean = df_clean[df_clean[src_col] != df_clean[tgt_col]]
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
        df_clean = df_clean.drop_duplicates(subset=[src_col])
        filtered_count = original_len - len(df_clean)
    else:
        filtered_count = 0
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    df_clean = df_clean.reset_index(drop=True)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    files_data = {}
    
    # 1. –§–∞–π–ª —Ç–æ–ª—å–∫–æ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
    files_data[f"{prefix}_source_only.csv"] = pd.DataFrame({
        'en': df_clean[src_col]
    })
    
    # 2. –§–∞–π–ª —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    files_data[f"{prefix}_reference_only.csv"] = pd.DataFrame({
        'ru': df_clean[tgt_col]
    })
    
    # 3. –ü–æ–ª–Ω—ã–π –±–∏–ª–∏–Ω–≥–≤–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    files_data[f"{prefix}_bilingual_full.csv"] = pd.DataFrame({
        'en': df_clean[src_col],
        'ru': df_clean[tgt_col]
    })
    
    # 4. –®–∞–±–ª–æ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
    files_data[f"{prefix}_translation_template.csv"] = pd.DataFrame({
        'en': df_clean[src_col],
        'ru': [''] * len(df_clean)
    })
    
    # 5. –§–∞–π–ª —Å ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    files_data[f"{prefix}_indexed.csv"] = pd.DataFrame({
        'ID': range(1, len(df_clean) + 1),
        'en': df_clean[src_col],
        'ru': df_clean[tgt_col]
    })
    
    return files_data, len(df_clean), filtered_count

def create_instructions(prefix, total_sentences, src_col, tgt_col, filter_empty):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    instructions = f"""# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

## –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:

1. **{prefix}_bilingual_full.csv** - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
   - –°–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã (en) –∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (ru)
   - –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∫–∞–∫ "–ò—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç" –≤ Translation Evaluator
   - –ù–ï –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∫ "–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥"

2. **{prefix}_source_only.csv** - —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
   - –¢–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ {prefix}_reference_only.csv –∫–∞–∫ "–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥"

3. **{prefix}_reference_only.csv** - —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å {prefix}_source_only.csv

4. **{prefix}_translation_template.csv** - —à–∞–±–ª–æ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
   - –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É 'ru' –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –æ—Ç Google/Yandex/–¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
   - –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

5. **{prefix}_indexed.csv** - —Å ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
   - –£–¥–æ–±–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

## –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

### –í–∞—Ä–∏–∞–Ω—Ç 1 (–ø—Ä–æ—â–µ):
- –ò—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {prefix}_bilingual_full.csv
- –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: –ù–ï –∑–∞–≥—Ä—É–∂–∞—Ç—å
- –ü–µ—Ä–µ–≤–æ–¥—ã –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º: –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã

### –í–∞—Ä–∏–∞–Ω—Ç 2 (—Ä–∞–∑–¥–µ–ª—å–Ω–æ):
- –ò—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {prefix}_source_only.csv
- –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {prefix}_reference_only.csv
- –ü–µ—Ä–µ–≤–æ–¥—ã –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º: –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_sentences}
- –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: –∫–æ–ª–æ–Ω–∫–∞ '{src_col}'
- –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: –∫–æ–ª–æ–Ω–∫–∞ '{tgt_col}'
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {'–≤–∫–ª—é—á–µ–Ω–∞' if filter_empty else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}
"""
    return instructions

def main():
    st.title("üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Translation Evaluator")
    
    st.markdown("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –±–∏–ª–∏–Ω–≥–≤–∞–ª—å–Ω–æ–≥–æ CSV 
    –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Translation Evaluator.
    """)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    with st.sidebar:
        st.header("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        st.markdown("""
        **–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:**
        - –ö–æ–ª–æ–Ω–∫—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (en)
        - –ö–æ–ª–æ–Ω–∫—É —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º (ru)
        
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
        - CSV (UTF-8, –ª—é–±–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞)
        - XLSX (Excel —Ñ–∞–π–ª—ã)
        
        **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Å—Ç:**
        - –§–∞–π–ª —Ç–æ–ª—å–∫–æ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
        - –§–∞–π–ª —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏  
        - –ü–æ–ª–Ω—ã–π –±–∏–ª–∏–Ω–≥–≤–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        - –®–∞–±–ª–æ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
        - –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        
        **XLSX —Ñ–∞–π–ª—ã:**
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ CSV UTF-8
        - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        """)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ CSV –∏–ª–∏ XLSX —Ñ–∞–π–ª —Å –±–∏–ª–∏–Ω–≥–≤–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", 
        type=['csv', 'xlsx']
    )
    
    if uploaded_file is not None:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ —á–∏—Ç–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            file_extension = Path(uploaded_file.name).suffix.lower()
            
            if file_extension == '.xlsx':
                st.info("üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω XLSX —Ñ–∞–π–ª. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV UTF-8...")
                df = convert_xlsx_to_csv_data(uploaded_file)
                st.success("‚úÖ XLSX —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
            elif file_extension == '.csv':
                df = pd.read_csv(uploaded_file, encoding='utf-8-sig')
            else:
                st.error("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                return
            
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°—Ç—Ä–æ–∫: {len(df)}")
            
            if file_extension == '.xlsx':
                st.info("üí° –ò—Å—Ö–æ–¥–Ω—ã–π XLSX —Ñ–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ CSV UTF-8")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            st.subheader("üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
            st.dataframe(df.head(), use_container_width=True)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
            src_col_auto, tgt_col_auto = detect_columns(df)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            col1, col2 = st.columns(2)
            
            with col1:
                src_col = st.selectbox(
                    "–ö–æ–ª–æ–Ω–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (en)",
                    options=df.columns,
                    index=df.columns.get_loc(src_col_auto) if src_col_auto else 0
                )
                
                prefix = st.text_input(
                    "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤",
                    value=Path(uploaded_file.name).stem
                )
            
            with col2:
                tgt_col = st.selectbox(
                    "–ö–æ–ª–æ–Ω–∫–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º (ru)",
                    options=df.columns,
                    index=df.columns.get_loc(tgt_col_auto) if tgt_col_auto else 1
                )
                
                filter_empty = st.checkbox(
                    "–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –¥—É–±–ª–∏",
                    value=True,
                    help="–£–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –ø–µ—Ä–µ–≤–æ–¥ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            if src_col and tgt_col:
                st.subheader("üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                preview_df = pd.DataFrame({
                    '–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç': df[src_col].head(3),
                    '–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥': df[tgt_col].head(3)
                })
                st.dataframe(preview_df, use_container_width=True)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
            if st.button("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã", type="primary"):
                if src_col and tgt_col:
                    with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
                        try:
                            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            files_data, total_sentences, filtered_count = prepare_files_data(
                                df, src_col, tgt_col, prefix, filter_empty
                            )
                            
                            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                            instructions = create_instructions(
                                prefix, total_sentences, src_col, tgt_col, filter_empty
                            )
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            st.success("‚úÖ –§–∞–π–ª—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                            
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", total_sentences)
                            with col2:
                                st.metric("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ", filtered_count)
                            with col3:
                                st.metric("–§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ", len(files_data))
                            
                            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            zip_buffer = io.BytesIO()
                            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                                # –î–æ–±–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª—ã
                                for filename, data in files_data.items():
                                    csv_data = data.to_csv(index=False).encode('utf-8-sig')
                                    zip_file.writestr(filename, csv_data)
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                                zip_file.writestr(f"{prefix}_INSTRUCTIONS.md", instructions.encode('utf-8'))
                            
                            zip_buffer.seek(0)
                            
                            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            st.download_button(
                                label="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã (ZIP)",
                                data=zip_buffer.getvalue(),
                                file_name=f"{prefix}_prepared_files.zip",
                                mime="application/zip"
                            )
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                            st.subheader("üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
                            for filename, data in files_data.items():
                                with st.expander(f"üìÑ {filename} ({len(data)} —Å—Ç—Ä–æ–∫)"):
                                    st.dataframe(data.head(), use_container_width=True)
                                    
                                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                                    csv_data = data.to_csv(index=False).encode('utf-8-sig')
                                    st.download_button(
                                        label=f"üì• –°–∫–∞—á–∞—Ç—å {filename}",
                                        data=csv_data,
                                        file_name=filename,
                                        mime="text/csv",
                                        key=f"download_{filename}"
                                    )
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                            st.subheader("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                            st.markdown(instructions)
                            
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")
                            st.exception(e)
                else:
                    st.error("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º")
        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CSV –∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8")

if __name__ == "__main__":
    main()
